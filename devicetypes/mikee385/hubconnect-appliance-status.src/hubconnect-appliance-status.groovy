/*
 *	Copyright 2019 Steve White
 *
 *	Licensed under the Apache License, Version 2.0 (the "License"); you may not
 *	use this file except in compliance with the License. You may obtain a copy
 *	of the License at:
 *
 *		http://www.apache.org/licenses/LICENSE-2.0
 *
 *	Unless required by applicable law or agreed to in writing, software
 *	distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *	WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *	License for the specific language governing permissions and limitations
 *	under the License.
 *
 *
 */
metadata
{
	definition(name: "HubConnect Appliance Status", namespace: "shackrat", author: "Steve White")
	{
	    capability "Actuator"
		capability "Switch"
		capability "Refresh"

		attribute "state", "enum", ["running", "finished", "unstarted"]
        attribute "running", "boolean"
        attribute "finished", "boolean"
        attribute "unstarted", "boolean"
        
        command "start"
        command "finish"
        command "reset"
        
		// Autogenerated attributes 
        attribute "version", "string"

		command "sync"
	}
	
	tiles(scale: 2)
	{
		multiAttributeTile(name: "state", type: "generic", width: 6, height: 4, canChangeBackground: true, canChangeIcon: true) {
		{
		tileAttribute ("device.state", key: "PRIMARY_CONTROL") {
                attributeState "running", label: 'Running', backgroundColor:"#e86d13"
                attributeState "finished", label: 'Finished', backgroundColor:"#00A0DC"
                attributeState "unstarted", label: 'Unstarted', backgroundColor:"#ffffff"
            }
        }
        standardTile("start", "device.running", width: 2, height: 2) {
            state "running", label:"Start", action: "start", backgroundColor:"#008000", nextState:"toStart"
            state "toStart", label:"Updating", backgroundColor:"#00A0DC"
        }
        standardTile("finish", "device.finished", width: 2, height: 2) {
            state "finished", label:"Finish", action: "finish", backgroundColor:"#ff0000", nextState:"toFinish"
            state "toFinish", label:"Updating", backgroundColor:"#00A0DC"
        }
        standardTile("reset", "device.unstarted", width: 2, height: 2) {
            state "unstarted", label:"Reset", icon: "st.secondary.refresh-icon", action: "reset", backgroundColor:"#ffffff", nextState:"toReset"
            state "toReset", label:"Updating", icon: "st.secondary.refresh-icon", backgroundColor:"#00A0DC"
        }
		standardTile("refresh", "device.switch", width: 2, height: 2, inactiveLabel: false, decoration: "flat")
		{
			state "default", label:'', action:"refresh.refresh", icon:"st.secondary.refresh"
		}
		standardTile("sync", "sync", inactiveLabel: false, decoration: "flat", width: 2, height: 2)
		{
			state "default", label: 'Sync', action: "sync", icon: "st.Bath.bath19"
		}
		valueTile("version", "version", inactiveLabel: false, decoration: "flat", width: 2, height: 2)
		{
			state "default", label: '${currentValue}'
		}
		
        main (["state"])
        details(["state", "start", "finish", "reset"])
	}
}


/*
	installed
*/
def installed()
{
	initialize()
}


/*
	updated
*/
def updated()
{
	initialize()
}


/*
	initialize
*/
def initialize()
{
	refresh()
}


/*
	refresh
*/
def refresh()
{
	// The server will update status
	parent.sendDeviceEvent(device.deviceNetworkId, "refresh")
}


/*
	on
*/
def on()
{
	// The server will update status
	parent.sendDeviceEvent(device.deviceNetworkId, "on")
}


/*
	off
*/
def off()
{
	// The server will update status
	parent.sendDeviceEvent(device.deviceNetworkId, "off")
}

/*
	start
*/
def start()
{
	// The server will update status
	parent.sendDeviceEvent(device.deviceNetworkId, "start")
}

/*
	finish
*/
def finish()
{
	// The server will update status
	parent.sendDeviceEvent(device.deviceNetworkId, "finish")
}

/*
	reset
*/
def reset()
{
	// The server will update status
	parent.sendDeviceEvent(device.deviceNetworkId, "reset")
}

/*
	sync
*/
def sync()
{
	// The server will respond with updated status and details
	parent.syncDevice(device.deviceNetworkId, "omnipurpose")
	sendEvent([name: "version", value: "v${driverVersion.major}.${driverVersion.minor}.${driverVersion.build}"])
}
def getDriverVersion() {[platform: "Hubitat", major: 1, minor: 0, build: 0]}

